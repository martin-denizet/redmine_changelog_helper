jQuery(document).ready(function ($) {
  // Values for sorting
  var importance_map = <%= @importances.to_json.html_safe %>;
  var machine_map = <%= @machines.to_json.html_safe %>;
  var type_map = <%= @types.to_json.html_safe %>;
  var subtype_map = <%= @subtypes.to_json.html_safe %>;

  function extract_data(content, tag) {
    var regexp = new RegExp('\\[' + tag + ':(\\w*)\\]?', 'g');
    var parts = regexp.exec(content);
    if (Array.isArray(parts) && parts.length > 1) {
      return parts[1];
    }
    return '';
  }


  function render_changelog_lines(target) {
    //Changelines
    target.find('.toc ul').addClass('toc-ul');
    target.find('ul.toc').addClass('toc-ul');
    target.find('ul').not('.toc-ul').addClass('changelog-lines-original-container');
    target.find('ul.changelog-lines-original-container').after('<div class="changelog-lines-container"></div>');
    target.find('ul.changelog-lines-original-container').find('li').each(function () {

      var text = $(this).html();
      var machine = extract_data(text, 'machine');
      var type = extract_data(text, 'type');
      var subtype = extract_data(text, 'subtype');
      var importance = extract_data(text, 'importance');
      text = text.replace('[machine:' + machine + ']', '');
      text = text.replace('[type:' + type + ']', '');
      text = text.replace('[subtype:' + subtype + ']', '');
      text = text.replace('[importance:' + importance + ']', '');
      if (text.charAt(0) == ':') {
        text = text.substring(1);
      }

      $(this).html('<b style="float:right">' + type_key_to_string(type) + ' ' +
          importance_key_to_string(importance) + '</b> ' + text);

      $(this).data('machine-name', machine_key_to_string(machine));

      $(this).data('machine', machine);
      $(this).data('type', type);
      $(this).data('type-name', type_key_to_string(type));
      $(this).data('subtype', subtype);
      $(this).data('importance', importance);

      $(this).css('padding-left', '4em');
      $(this).addClass('changelog-line');
      $(this).addClass('changelog-line-type-' + type);
      $(this).addClass('changelog-line-subtype-' + subtype);
      $(this).addClass('changelog-line-importance-' + importance);
      //TODO: Check if the line is an actual changelog line
    });
  }

  function render_dates(target) {
    target.find('.version-wrapper').each(function () {
      var date = $(this).find('p:first');
      var date_value = date.text();
      if (date_value == '0000-00-00') {
        date_value = '>>>>>>>>>>>> IN PROGRESS <<<<<<<<<<<<<<<';
      }

      $(this).find('h2.changelog-version').data('date', date_value);
      $(this).find('h2.changelog-version').html(
          $(this).find('h2.changelog-version').html() + ' <small><em class="version-date">' + date_value + '</em></small>'
      );

      date.remove()
    });
  }

  //Process changelog display
  function render_changelog(target) {
    render_changelog_lines(target);
    //Versions
    var version = '';
    var is_latest_branch = true;
    var latest_branch = '';
    target.find('h2').each(function () {
      $(this).addClass('changelog-version');
      //Insert wrapper before h2
      var wrapper = $('<div id="undefined-version-wrapper" class="version-wrapper"></div>').insertBefore($(this));
      //Extract version
      var re = /([\d\.]+)/g;
      var m = re.exec($(this).text());
      if (Array.isArray(m) && m.length > 0) {
        version = m[1];
      }
      if (version) {
        $(this).attr('id', 'version-' + version.split('.').join('-') + '-header');
        wrapper.attr('id', 'version-' + version.split('.').join('-') + '-wrapper');
        wrapper.data('version', version);
        wrapper.data('version-slug', version.split('.').join('-'));
        $(this).data('version', version);
      }

      if ($(this).text().trim().length > 0) {
        if ($(this).text().trim()[0] === '+') {
          wrapper.data('maintenance-release', true);
          wrapper.addClass('maintenance-release');
        } else {
          wrapper.addClass('main-release');
        }
      }

      //Extract branch
      if (version) {
        var parts = version.split('.');
        //At least 1 dot to be recognized as a version
        if (parts.length > 1) {
          //Cast to int
          //All digits but last constitute the branch
          parts = parts.map(function (x) {
            return parseInt(x, 10);
          }).slice(0, -1);
          var branch = parts.join('.');
          wrapper.data('branch', branch);
          //Do we know latest branch?
          if (!latest_branch) {
            latest_branch = branch;
          } else {
            //Did we change branch?
            if (latest_branch !== branch) {
              is_latest_branch = false;
            }
          }
          wrapper.data('branch', branch);
          //
          if (is_latest_branch) {
            wrapper.addClass('latest-branch');
          } else {
            wrapper.addClass('not-latest-branch');
          }
        }
      }

      //Elements until the next <hr>
      $(this).nextUntil('hr').appendTo(wrapper);
      $(this).next('hr').appendTo(wrapper);
      //Finally move the heading to wrapper
      $(this).prependTo(wrapper);
    });

  }

  function machine_key_to_string(machine) {
    var machine_name = '';
    switch (machine) {
        <% @machines.each do |k,v| %>
      case '<%=k%>':
        machine_name = '<%=v%>';
        break;
        <% end %>
    }
    return machine_name;
  }

  function type_key_to_string(type) {
    var type_name = '';
    switch (type) {
        <% @types.each do |k,v| %>
      case '<%=k%>':
        type_name = '<%=v%>';
        break;
        <% end %>
    }
    return type_name;
  }

  function subtype_key_to_string(type) {
    var subtype_name = '';
    switch (type) {
        <% @subtypes.each do |k,v| %>
      case '<%=k%>':
        subtype_name = '<%=v%>';
        break;
        <% end %>
    }
    return subtype_name;
  }

  function importance_key_to_string(type) {
    var importance_name = '';
    switch (type) {
        <% @importances.each do |k,v| %>
      case '<%=k%>':
        importance_name = '<%=v%>';
        break;
        <% end %>
    }
    return importance_name;
  }

  function sort_by_type(a, b) {
    var av = $(a).data('type-name');
    var bv = $(b).data('type-name');
    if (av < bv) return -1;
    if (av > bv) return 1;
    return 0;
  }

  /**
   * Sort changelog line to group them by machine
   */
  function sort_changelog_lines() {

    $('ul.changelog-lines-original-container').each(function () {
          $(this).find('li.changelog-line').sort(function (a, b) {
            var av = Object.keys(machine_map).indexOf($(a).data('machine'));
            var bv = Object.keys(machine_map).indexOf($(b).data('machine'));
            if (av < bv) return 1;
            if (av > bv) return -1;
            //Sort lines with identical machine name by type
            return sort_by_type(a, b);
          }).appendTo($(this));
        }
    );
    //Group lines by machine
    $('ul.changelog-lines-original-container').each(function () {
          var _this = $(this);
          _this.find('li.changelog-line').each(function () {
            var machine = $(this).data('machine');
            var type = $(this).data('type');
            var container = _this.next('.changelog-lines-container');
            $(this).appendTo(container)
          });
        }
    );
  }

  function add_filters(container, filter_target) {
    add_filter(container.append('<p><b>Types filter</b><ul></ul></p>'), 'type', <%=@types.to_json.html_safe%>);
    add_filter(container.append('<p><b>Subtypes filter</b><ul></ul></p>'), 'subtype', <%=@subtypes.to_json.html_safe%>);
    add_filter(container.append('<p><b>Importance filter</b><ul></ul></p>'), 'importance', <%=@importances.to_json.html_safe%>);

    //Grouping
    container.append('<p><b>Group by</b><ul><li>' +
        '<select id="grouping-select" name="grouping">' +
        '<option value="machine">Machine type</option>' +
        '<option value="subtype">Machine sub-type</option>' +
        '<option value="importance">Priority</option>' +
        '<option value="type">Type</option>' +
        '</select>' +
        '</li></ul></p>');
    $('#grouping-select').on('change', function () {
      var value = $(this).val();
      group_by(value);
    });
    function group_by(property) {
      $('.lines-group-header').remove();
      values = eval(property + '_map');
      $('.changelog-lines-container').each(function () {
        var container = $(this);

        for (code in values) {
          label = values[code];
          css_class = 'group-' + property + '-' + code;
          var group = container.find('.' + css_class);

          if (group.length === 0) {
            //Create a container for the group
            group = container.append('<div class="lines-group ' + css_class + '" data-label="' + label + '"><h4 class="lines-group-header">' + label + '</h4></div>');
            //Containers for the sub-groups
            for (var subgroup_code in subtype_map) {
              subgroup_label = subtype_map[subgroup_code];
              subgroup_css_class = 'subgroup-subtype-' + subgroup_code;
              group.find('.' + css_class).append('<div class="lines-subgroup ' + subgroup_css_class + '" data-label="' + subgroup_label + '">' +
                  '<h3>' + subgroup_label + '</h3>' +
                  '</div>')
            }
          } else {
            group.prepend('<h4 class="lines-group-header">' + label + '</h4>')
          }
        }
        container.find('.changelog-line').each(function () {
          var code = $(this).data(property);
          var css_class = '.group-' + property + '-' + code + ' .subgroup-subtype-' + $(this).data('subtype');
          $(this).appendTo(container.find(css_class));
        });
      });
      hide_empty();
    }

    group_by($('#grouping-select').val());
    //Sorting
    container.append('<p><b>Sort by</b><ul><li>' +
        '<select id="sorting-select" name="sorting">' +
        '<option value="importance">Priority</option>' +
        '<option value="machine">Machine type</option>' +
        '<option value="subtype">Machine sub-type</option>' +
        '<option value="type">Type</option>' +
        '</select>' +
        '</li></ul></p>');
    $('#sorting-select').on('change', function () {
      var value = $(this).val();
      var values = Object.keys(eval(value + '_map'));
      $('.lines-subgroup').each(function () {
        $(this).find('li.changelog-line').sort(function (a, b) {
          return values.indexOf($(a).data(value)) > values.indexOf($(b).data(value));
        }).appendTo($(this));
      });
    });
    $('#sorting-select').trigger('change');
    //Maintenance releases filter
    container.append('<p><b>Support branches filter</b><ul><li><label>' +
        '<input type="checkbox" name="maintenance-releases-filter-hide" value="hide" id="maintenance-releases-filter-checkbox" class="maintenance-releases-filter-checkbox" >' +
        'Hide support branches releases</label>' +
        '</li></ul></p>');

    $('#maintenance-releases-filter-checkbox').on('change', function () {
      var hide_support_branch_releases = $(this).is(':checked');
      //Hide all
      $('.version-wrapper').hide();
      //Show required
      //Always show main releases and its maintenance releases
      $('.version-wrapper.main-release').show();
      $('.version-wrapper.maintenance-release.latest-branch').show();

      $('.version-wrapper.maintenance-release.not-latest-branch').toggle(!hide_support_branch_releases);

      //Hide empty versions
      $('.version-wrapper:not(:has(.lines-group:visible))').hide();
    });

    //Versions filter
    container.append('<p><b>Versions filter</b><ul><li>' +
        '<label>' +
        'From:' +
        '<select name="select-version-from" id="select-version-from">' +
        '</select>' +
        '</label>' +
        '</li><li>' +
        '<label>' +
        'To:' +
        '<select name="select-version-to" id="select-version-to">' +
        '</select>' +
        '</li>' +
        '</ul></p>');

    //Collect all versions
    var versions = [];
    var version_elements = $('.version-wrapper');
    version_elements.each(function (index, element) {
      var version = $(this).data('version');
      versions.push(version);
      if (index < (version_elements.length - 1)) {
        // "From" cannot have the last version
        $('#select-version-from').append('<option value="' + version + '">' + version + '</option>');
      }
      if (index !== 0) {
        // "To" cannot have first version
        $('#select-version-to').append('<option value="' + version + '">' + version + '</option>');
      }
    });
    $('#select-version-to option:last').attr("selected", "selected");
    $('#select-version-to, #select-version-from').on('change', filter_versions);
  }

  /**
   * Triggered when select box is changed
   */
  function filter_versions() {
    var version_from = $('#select-version-from').val();
    var version_to = $('#select-version-to').val();
    var display = false;
    $('.version-wrapper').each(function () {
      var version = $(this).data('version');
      if (version == version_from) {
        display = true;
      }
      $(this).toggle(display);
      if (version == version_to) {
        display = false;
      }
    });
  }

  function add_filter(to, prop, values) {
    for (var k in values) {
      var v = values[k];
      to.append(
          '<li><label>' +
          '<input type="checkbox" name="changelog_filter_' + k + '" value="' + k + '"' +
          ' id="changelog-filter-checkbox-' + prop + '-' + k + '"' +
          ' data-filter-on="' + prop + '" data-key="' + k + '" class="changelog-filter-checkbox" CHECKED>' +
          v +
          '</label></li>'
      );
    }
  }

  function hide_empty() {
    $('.version-wrapper').show();
    $('.changelog-lines-container').find(".lines-group").show();
    //Delete empty subgroups
    $('.changelog-lines-container').find(".lines-subgroup:not(:has(.changelog-line))").remove();
    //Delete empty groups
    $('.changelog-lines-container').find(".lines-group:not(:has(.changelog-line))").remove();
    //Hide groups with no visible elements
    $('.changelog-lines-container').find(".lines-group:not(:has(li.changelog-line:visible))").hide();
    //Hide empty versions
    $('.version-wrapper:not(:has(.lines-group:visible))').hide();
  }

  $(document).on('change', 'input.changelog-filter-checkbox', function () {

    $('.changelog-line').each(function () {
      var line = $(this);
      var values = {
        machine: line.data('machine'),
        type: line.data('type'),
        subtype: line.data('subtype'),
        importance: line.data('importance')
      };
      // Check if all relevant checkboxes are checked
      var visible = true;
      const props = ['type', 'subtype', 'importance'];
      for (var prop_i in props) {
        var prop = props[prop_i];
        var cb = $('#changelog-filter-checkbox-' + prop + '-' + values[prop]);
        if (cb.length > 0 && !cb.is(':checked')) {
          visible = false;
          break;
        }
      }
      if (visible) {
        line.show();
      } else {
        line.hide();
      }
    });
    hide_empty();
  });

  render_changelog($('.wiki.wiki-page'));
  render_dates($('.wiki.wiki-page'));
  sort_changelog_lines();
  add_filters($('#sidebar'), $('.wiki.wiki-page'));
})
;